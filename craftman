#!/bin/bash
set -e
#
# Craft CMS manager
#
CM_PLUGINS=()

cm_version()
{
  if [ -d "$CM_ROOT/.git" ]; then
    echo "Craftman $(cd "$CM_ROOT" && git log master -1 --pretty=tformat:"%h (%cI)") - Craft CMS Manager"
  else
    echo "Craftman - Craft CMS Manager"
  fi
}

_posix_realpath() {
    _posix_canonicalize_path "$(_posix_resolve_symlinks "$1")"
}

_posix_resolve_symlinks() {
    local dir_context path
    path="$(readlink -- "$1")"
    if [ $? -eq 0 ]; then
        dir_context="$(dirname -- "$1")"
        _posix_resolve_symlinks "$(_posix_prepend_path_if_relative "$dir_context" "$path")"
    else
        printf '%s\n' "$1"
    fi
}

_posix_prepend_path_if_relative() {
    case "$2" in
        /* ) printf '%s\n' "$2" ;;
         * ) printf '%s\n' "$1/$2" ;;
    esac
}

_posix_canonicalize_path() {
    if [ -d "$1" ]; then
        _posix_canonicalize_dir_path "$1"
    else
        _posix_canonicalize_file_path "$1"
    fi
}

_posix_canonicalize_dir_path() {
    (cd "$1" 2>/dev/null && pwd -P)
}

_posix_canonicalize_file_path() {
    local dir file
    dir="$(dirname -- "$1")"
    file="$(basename -- "$1")"
    (cd "$dir" 2>/dev/null && printf '%s/%s\n' "$(pwd -P)" "$file")
}

cm_get_canonical_path()
{
  if [[ "$OSTYPE" == "darwin"* ]]; then
    _posix_realpath "$1"
  else
    readlink -f "$1"
  fi
}

_cm_initialize()
{
  # Base craftman configs
  CM="$(basename "$(cm_get_canonical_path "$0")")"
  CM_ROOT="$(dirname "$(cm_get_canonical_path "$0")")"
  if [ -z "$CRAFTMAN_DIR" ]; then
    CRAFTMAN_DIR="$HOME/.craftman"
  fi
  CM_PROJECT_CONFIG=".craftman"
  CM_PROJECT_PATH=$(cm_find_closest "$CM_PROJECT_CONFIG")
  if [ "$CM_PROJECT_PATH" = "$(dirname "$CRAFTMAN_DIR")" ]; then
    CM_PROJECT_PATH="$(pwd)"
  fi
  cm_debug "Project path: $CM_PROJECT_PATH"
  CM_CACHE="$CRAFTMAN_DIR/cache"
  CM_CONFIG_PATH="$CRAFTMAN_DIR/config"
  CM_CUSTOM_CONFIG_PATH="$CRAFTMAN_DIR/config.d"
  CM_PLUGIN_PREFIX=""
  CM_PLUGINS_DIR="$CRAFTMAN_DIR/plugins"
  CM_PLUGINS_CORE_DIR="$CM_ROOT/plugins"
  [ "$CM_PROJECT_PATH" = "" ] && CM_PROJECT_PATH="."
  CM_PROJECT_PATH="$(cm_get_canonical_path "$CM_PROJECT_PATH")"
  CM_PROJECT_DIR="$(basename "$CM_PROJECT_PATH")"
  CM_PROJECT_NAME="$(echo "$CM_PROJECT_DIR" | tr '[:upper:]' '[:lower:]')"
  CM_PROJECT_CRAFTMAN_PATH="$CM_PROJECT_PATH/$CM_PROJECT_CONFIG"
  CM_PROJECT_CRAFTMAN_CONFIG="$CM_PROJECT_CRAFTMAN_PATH/config"
  CM_PROJECT_CUSTOM_CONFIG_PATH="$CM_PROJECT_CRAFTMAN_PATH/config.d"
  # Default craftman configurations
  CM_DOCKER_PHP_IMAGE="php:7.0-apache"
  CM_DOCKER_MYSQL_IMAGE="mariadb:10.1"
  CM_DOCKER_DATA_IMAGE="debian:jessie"
  CM_DOCKER_MYSQL_ENV=$(cat <<SETVAR
    - MYSQL_DATABASE=craft
    - MYSQL_ALLOW_EMPTY_PASSWORD=yes
SETVAR
)
  CM_DOCKER_MYSQL_DATA_VOLUMES="    - /var/lib/mysql"
  CM_DOCKER_CRAFT_CUSTOM_VOLUMES=""
  CM_DOCKER_CRAFT_ENVS=()
  CM_DOCKER_CRAFT_DEFAULT_ENV=$(cat <<SETVAR
    - CRAFT_DEVMODE=true
SETVAR
)
  CM_CRAFT_DOWNLOAD_URL="https://craftcms.com/latest.tar.gz?accept_license=yes"
  CM_CRAFT_FILENAME="craft-$(date "+%Y-%m").tar.gz"
  CM_APP_DIR="site"
  CM_BACKUPS_DIR="backups"
  CM_SCRIPTS_DIR="scripts"
  CM_DOCKER_COMPOSE="docker-compose.yml"
  CM_INSTALLER_DIR="install"
  CM_INSTALL_DEPENDENCIES="010_dependencies.sh"
  CM_PECL_INSTALL="imagick redis"
  CM_PHP_EXT_INSTALL="iconv mcrypt gd mbstring pdo pdo_mysql zip"
  CM_PHP_EXT_ENABLE="imagick redis"
  CM_APACHE_MODS_ENABLE="rewrite setenvif deflate headers filter"
  CM_APT_INSTALL=$(cat <<SETVAR
        libfreetype6-dev \
        libjpeg62-turbo-dev \
        libmcrypt-dev \
        libpng-dev \
        libmagickwand-dev \
        vim curl git wget unzip
SETVAR
)
  CM_CUSTOM_INSTALL=""
  CM_USER=""
  CM_GROUP=""
  CM_www_PERMISSIONS="775"

  # Default craftman options
  CM_CRAFT_HTTP_PORT=""
  CM_FORCE_DOWNLOAD="0"
  CM_FORCE_OVERWRITE="0"
  CM_FORCE_RECREATE="0"

  # Create default directories
  mkdir -p "$CM_CACHE"
  mkdir -p "$CM_PLUGINS_DIR"
  mkdir -p "$CM_CUSTOM_CONFIG_PATH"

  # Configure and interpolate variables
  _cm_config

  # Load custom variables and hooks
  if [ -f "$CRAFTMAN_DIR/config" ]; then
    cm_debug "Loading $CRAFTMAN_DIR/config"
    # shellcheck source=/dev/null
    . "$CRAFTMAN_DIR/config"
  fi

    # Load all plugins
  _cm_load_plugins

  # Load custom variables and hooks
  if [ -f "$CM_PROJECT_CRAFTMAN_CONFIG" ]; then
    cm_debug "Loading $CM_PROJECT_CRAFTMAN_CONFIG"
    # shellcheck source=/dev/null
    . "$CM_PROJECT_CRAFTMAN_CONFIG"
  fi

  if [ -d "$CM_PROJECT_CUSTOM_CONFIG_PATH" ]; then
    cm_debug "Searching $CM_PROJECT_CUSTOM_CONFIG_PATH/*.conf"
    _CM_CONFIG_COUNT=$(sh -c "ls 2>/dev/null ls -1f \"$CM_PROJECT_CUSTOM_CONFIG_PATH/\"*.conf | wc -l | tr -d '[[:space:]]'")
    cm_debug "Config file count $_CM_CONFIG_COUNT"
    if [ "$_CM_CONFIG_COUNT" != "0" ]; then
      for _CM_PROJECT_CONFIG_FILE in "$CM_PROJECT_CUSTOM_CONFIG_PATH/"*.conf
      do
        cm_debug "Loading [$_CM_PROJECT_CONFIG_FILE]"
        # shellcheck source=/dev/null
        . "$_CM_PROJECT_CONFIG_FILE"
      done
    fi
  fi

  # Customize any variable
  cm_config_hook
  _cm_config

  # Run all [plugin]__init functions from plugins
  cm_trigger "init"

  if [ "$TRACE" != "" ]; then
    (set -o posix ; set) | grep CM_
  fi

}

_cm_config()
{
  CM_APP_PATH="$CM_PROJECT_PATH/$CM_APP_DIR"
  CM_BACKUPS_PATH="$CM_PROJECT_PATH/$CM_BACKUPS_DIR"
  CM_SCRIPTS_PATH="$CM_PROJECT_PATH/$CM_SCRIPTS_DIR"
  CM_DOCKER_COMPOSE_PATH="$CM_PROJECT_PATH/$CM_DOCKER_COMPOSE"
  CM_INSTALLER_PATH="$CM_SCRIPTS_PATH/$CM_INSTALLER_DIR"
  CM_INSTALL_DEPS_PATH="$CM_INSTALLER_PATH/$CM_INSTALL_DEPENDENCIES"
  CM_CRAFT_DB_CONFIG_PATH="$CM_APP_PATH/craft/config/db.php"
  CM_CRAFT_GENERAL_CONFIG_PATH="$CM_APP_PATH/craft/config/general.php"
  CM_PHP_INI_PATH="$CM_SCRIPTS_PATH/override/usr/local/etc/php/php.ini"
  CM_CRAFT_TAR="$CM_CACHE/$CM_CRAFT_FILENAME"
  CM_DOCKER_CRAFT_DEFAULT_VOLUMES=$(cat <<SETVAR
    - "./$CM_APP_DIR:/var/www"
    - "./$CM_SCRIPTS_DIR:/scripts"
SETVAR
)

  # Run all [plugin]__config functions from plugins
  cm_trigger "config"
}

cm_usage()
{
  cm_version
  echo
  echo "Usage: $CM [options] <COMMAND> [args]"
  echo
  echo "Commands:"
  echo " $CM install               Install Craft CMS in current directory"
  echo " $CM open [path]           Open Craft CMS public site"
  echo " $CM admin                 Open Craft CMS admin dashboard"
  echo " $CM start                 Start Craft CMS docker containers"
  echo " $CM stop                  Stop Craft CMS docker containers"
  echo " $CM status                Check Craft CMS docker containers status"
  echo " $CM ip                    Show Craft CMS docker container IP address"
  echo " $CM run                   Open bash or run a command on Craft docker container"
  echo " $CM regenerate            Regenerate all configuration files"
  echo " $CM reconfigure           Run all $CM_SCRIPTS_DIR/install/* files"
  echo " $CM copy                  Copy $CM_SCRIPTS_DIR/override/**/* to craft container root /"
  echo " $CM remove                Remove all containers"
  echo " $CM --upgrade             Upgrade Craftman"
  echo
  echo "Options:"
  echo " -h, --help"
  echo " -v, --version"
  echo " -P, --port=<HTTP-PORT>    HTTP port to expose on host"
  echo
  echo " -F, --force-all       Force redownload Craft CMS, regenerate and overwrite configurations and recreate containers"
  echo " -D, --force-download  Force to download latest Craft CMS from site"
  echo " -O, --force-overwrite Force to overwrite generated configuration files at ${CM_APP_DIR}/ and ${CM_SCRIPTS_DIR}/ directories"
  echo " -R, --force-recreate  Force to reconfigure and recreate containers"
  echo
  CM_TRIGGER_PRE="_cm_pre_plugin_usage"
  CM_TRIGGER_POST="_cm_post_plugin_usage"
  cm_trigger "usage"
  echo "Full Documentation: https://github.com/gabrielmoreira/craftman"
  echo
}

cm_trace()
{
  if [ "$TRACE" != "" ]; then
    echo "***> $*"
  fi
}

cm_debug()
{
  if [ "$DEBUG" != "" ]; then
    echo "---> $*"
  fi
}

cm_log()
{
    echo "===> $*"
}

cm_abort()
{
  >&2 echo "[ERROR] $1"
  exit ${2:1}
}

cm_trigger()
{
  RUN_COMMAND=$1
  shift
  for PLUGIN in "${CM_PLUGINS[@]}"
  do
    PLUGIN_COMMAND="${CM_PLUGIN_PREFIX}${PLUGIN}__${RUN_COMMAND}"
    cm_call "$PLUGIN_COMMAND" "$@"
  done
  unset CM_TRIGGER_PRE
  unset CM_TRIGGER_POST
}

cm_call()
{
  PLUGIN_COMMAND="$1"
  shift
  cm_trace "Run $PLUGIN_COMMAND $*"
  if [ "$(cm_command_exists "$PLUGIN_COMMAND")" = "true" ]; then
    if [ "$(cm_command_exists "$CM_TRIGGER_PRE")" = "true" ]; then
      $CM_TRIGGER_PRE "$PLUGIN" "$@"
    fi
    $PLUGIN_COMMAND "$@"
    if [ "$(cm_command_exists "$CM_TRIGGER_POST")" = "true" ]; then
      $CM_TRIGGER_POST "$PLUGIN" "$@"
    fi
  fi
}

_cm_pre_plugin_usage()
{
  _CM_TRIGGER_PRE="$CM_TRIGGER_PRE"
  CM_TRIGGER_PRE=""
  _CM_TRIGGER_POST="$CM_TRIGGER_POST"
  CM_TRIGGER_POST=""
  _CM_PLUGIN_INFO="$(cm_call "$1__info")"
  if [ "$_CM_PLUGIN_INFO" != "" ]; then
    echo "$_CM_PLUGIN_INFO commands:"
  else
    echo "Plugin $1:"
  fi
  CM_TRIGGER_PRE="$_CM_TRIGGER_PRE"
  CM_TRIGGER_POST="$_CM_TRIGGER_POST"
}


_cm_post_plugin_usage()
{
  echo
}


cm_command_exists()
{
  CMD="$1"
  if [ -n "$(type -t "$CMD")" ] && [ "$(type -t "$CMD")" = "function" ]; then
    echo "true"
  fi
}

_cm_load_plugins()
{
  cm_debug "Loading custom plugins from $CM_PLUGINS_DIR"
  _cm_load_plugins_from_directory "$CM_PLUGINS_DIR"

  cm_debug "Loading core plugins from $CM_PLUGINS_CORE_DIR"
  _cm_load_plugins_from_directory "$CM_PLUGINS_CORE_DIR"

  IFS=$'\n' CM_PLUGINS=($(sort <<<"${CM_PLUGINS[*]}"))
}

_cm_load_plugins_from_directory()
{
  if [ -d "$1" ]; then
    find "$1" -type f -name '*.plugin' > "$CM_CACHE/craftman_plugins"
    while read -r PLUGIN_FILE;
    do
       cm_debug "+  Loading plugin $PLUGIN_FILE"
       unset PLUGIN_NAME
       # shellcheck source=/dev/null
       . "$PLUGIN_FILE"
       [ "$PLUGIN_NAME" != "" ] || cm_abort "Plugin name not defined at $PLUGIN_FILE"
       CM_PLUGINS+=("$PLUGIN_NAME")
       cm_debug "+  Plugin added $PLUGIN_NAME"
    done < "$CM_CACHE/craftman_plugins"
    cm_debug "All plugins: ${CM_PLUGINS[*]}"
  fi
}

cm_download()
{
  cm_log "Preparing to download Craft CMS"
  if [ -f "$CM_CRAFT_TAR" ] && [ "$CM_FORCE_DOWNLOAD" == "0" ]; then
    cm_log "+  Using Craft CMS from local cache"
  else
    cm_log "+  Downloading Craft CMS from $CM_CRAFT_DOWNLOAD_URL"
    curl -o "$CM_CRAFT_TAR.partial" --retry 3 -0 -L -C - "$CM_CRAFT_DOWNLOAD_URL"
    rm -Rf "$CM_CRAFT_TAR"
    mv -f "$CM_CRAFT_TAR.partial" "$CM_CRAFT_TAR"
  fi
}

_cm_extract_craft()
{
  cm_log "Extracting Craft CMS tar.gz"
  mkdir -p "$CM_APP_PATH"
  if [ "$(ls -A "$CM_APP_PATH")" ] && [ "$CM_FORCE_OVERWRITE" == "0" ]; then
    cm_abort "+  $CM_APP_PATH is not empty"
  else
    cm_log "+  Extracting craft.tar.gz to $CM_APP_PATH"
    tar -C "$CM_APP_PATH" -xzf "$CM_CRAFT_TAR"
    rm -f "$CM_CRAFT_DB_CONFIG_PATH"
    rm -f "$CM_CRAFT_GENERAL_CONFIG_PATH"
    if [ -d "$CM_APP_PATH/html" ]; then
      cm_log "+  Directory already exist $CM_APP_PATH/html"
    else
      mkdir "$CM_APP_PATH/html"
    fi
    mv -f "$CM_APP_PATH/public/"* "$CM_APP_PATH/html"
    if [ ! -f "$CM_APP_PATH/html/.htaccess" ]; then
      mv "$CM_APP_PATH/html/htaccess" "$CM_APP_PATH/html/.htaccess"
    fi
    rm -Rf "$CM_APP_PATH/public"
  fi
}

cm_generate()
{
  cm_log "Generating Craft CMS configurations"
  _cm_installers_setup
  _cm_generate_dependencies_install
  _cm_generate_craft_db_config
  _cm_generate_craft_general_config
  _cm_generate_docker_compose_config
  _cm_generate_php_config
  cm_trigger "generate"
}

_cm_installers_setup()
{
  mkdir -p "$CM_INSTALLER_PATH"
  mkdir -p "$CM_APP_PATH"
  cm_gitignore_add "*.ok" "$CM_INSTALLER_PATH"
  if [ "$CM_FORCE_RECREATE" = "1" ]; then
    cm_installer_ensure_run "$CM_INSTALL_DEPENDENCIES"
  fi
}

_cm_generate_dependencies_install()
{
  cm_can_generate "$CM_INSTALL_DEPS_PATH"
  if [ "$CM_GENERATE_FILE" != "" ]; then
    cat > "$CM_GENERATE_FILE" <<- EOF
#!/bin/sh
set -e
echo "===> Installing dependencies"
cd /scripts && touch .gitignore

echo "===> +  Configuring user and group"
CM_USER="$CM_USER"
CM_GROUP="$CM_GROUP"

if [ "\$CM_USER" = "" ]; then
  CM_USER="\$(stat -c '%u' "/var/www")"
fi
if [ "\$CM_GROUP" = "" ]; then
  CM_GROUP="\$(stat -c '%g' "/var/www")"
fi

echo "===> +    User id: \$CM_USER"
echo "===> +    Group id: \$CM_GROUP"

getent group "\$CM_GROUP" || groupadd craftman -g "\$CM_GROUP"

usermod -u "\$CM_USER" www-data || echo "User \$CM_USER already exists"
usermod -G "\$CM_GROUP" www-data || echo "Group \$CM_GROUP already exists"

echo "===> +  Configuring site permissions"
chown -R \$CM_USER:\$CM_GROUP /var/www
echo "===> +    Set $CM_www_PERMISSIONS permissions to /var/www"
chmod -R $CM_www_PERMISSIONS /var/www

# Download and install libraries
echo "===> +  Update and install apt-get libraries"
apt-get update
apt-get install -y --no-install-recommends \
  $CM_APT_INSTALL

echo "===> +  Install php extensions"
printf "\n" | pecl install -f $CM_PECL_INSTALL

docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/
docker-php-ext-install -j\$(nproc) $CM_PHP_EXT_INSTALL
docker-php-ext-enable $CM_PHP_EXT_ENABLE

echo "===> +  Enable apache mods"
a2enmod $CM_APACHE_MODS_ENABLE

$CM_CUSTOM_INSTALL

EOF
  fi
}

_cm_generate_craft_db_config()
{
  cm_can_generate "$CM_CRAFT_DB_CONFIG_PATH"
  if [ "$CM_GENERATE_FILE" != "" ]; then
    cat > "$CM_GENERATE_FILE" <<- EOF
<?php
/**
 * Database Configuration
 * You can see a list of the default settings in craft/app/etc/config/defaults/db.php
 */
\$env = getenv("MYSQL_ENV") ?: "MYSQL_PORT";
\$url = getenv(\$env) ?: getenv("CLEARDB_DATABASE_URL");
if (getenv("MYSQL_ENV_MYSQL_ALLOW_EMPTY_PASSWORD") == "yes") {
 \$url = 'mysql://' . (getenv("MYSQL_USER") ?: 'root') . '@' . getenv("MYSQL_PORT_3306_TCP_ADDR") . ':' . getenv("MYSQL_PORT_3306_TCP_PORT") . '/' . getenv("MYSQL_ENV_MYSQL_DATABASE");
}
\$url = \$url ?: getenv("MYSQL_URL");
\$url = parse_url(\$url ?: 'mysql://root@localhost');

return array(
  'server' => getenv('CRAFT_DB_SERVER') ?: \$url["host"],
  'port' => getenv('CRAFT_DB_PORT') ?: \$url["port"],
  'user' =>  getenv('CRAFT_DB_USER') ?: \$url["user"],
  'password' =>  getenv('CRAFT_DB_PASSWORD') ?: (\$url["pass"] ?: ""),
  'database' => getenv('CRAFT_DB_NAME') ?: substr(\$url["path"],1),
  'tablePrefix' => getenv('CRAFT_DB_TABLE_PREFIX') ?: 'craft',
);
?>
EOF
  fi
}

_cm_generate_craft_general_config()
{
  cm_can_generate "$CM_CRAFT_GENERAL_CONFIG_PATH"
  if [ "$CM_GENERATE_FILE" != "" ]; then
    cat > "$CM_GENERATE_FILE" <<- EOF
<?php
/**
 * General Configuration
 *
 * You can see a list of the default settings in craft/app/etc/config/defaults/general.php
 */
return array(
  '*' => array(
    'omitScriptNameInUrls' => true,
    'sendPoweredByHeader' => false,
    'devMode' => getenv("CRAFT_DEVMODE") == "true"
  )
);
?>
EOF
  fi
}

_cm_generate_docker_compose_config()
{
  cm_can_generate "$CM_DOCKER_COMPOSE_PATH"
  if [ "$CM_GENERATE_FILE" != "" ]; then
    if [ "$CM_CRAFT_HTTP_PORT" != "" ]; then
      _CM_DOCKER_CRAFT_PORTS=$(cat <<SETVAR
  ports:        
    - $CM_CRAFT_HTTP_PORT:80
SETVAR
)
    fi
    cat > "$CM_GENERATE_FILE" <<- EOF
craft:
  image: "$CM_DOCKER_PHP_IMAGE"
  links:
    - "mysql:mysql"
$CM_DOCKER_CRAFT_CUSTOM_LINKS
  volumes:
$CM_DOCKER_CRAFT_DEFAULT_VOLUMES
$CM_DOCKER_CRAFT_CUSTOM_VOLUMES
  environment:
$CM_DOCKER_CRAFT_DEFAULT_ENV
${CM_DOCKER_CRAFT_ENVS[*]}
$_CM_DOCKER_CRAFT_PORTS
$CM_DOCKER_CRAFT_CUSTOM
mysql:
  image: "$CM_DOCKER_MYSQL_IMAGE"
  volumes_from:
    - "mysql_data"
  environment:
$CM_DOCKER_MYSQL_ENV
$CM_DOCKER_MYSQL_CUSTOM

mysql_data:
  image: "$CM_DOCKER_DATA_IMAGE"
  volumes:
$CM_DOCKER_MYSQL_DATA_VOLUMES
$CM_DOCKER_MYSQL_DATA_CUSTOM
EOF
  fi
}

_cm_generate_php_config()
{
  mkdir -p "$(dirname "$CM_PHP_INI_PATH")"
  cm_can_generate "$CM_PHP_INI_PATH"
  if [ "$CM_GENERATE_FILE" != "" ]; then
    cat > "$CM_GENERATE_FILE" <<- EOF
[PHP]
upload_max_filesize = 200M
post_max_size = 210M
max_execution_time = 120
max_input_vars = 100000
EOF
  fi
}

cm_can_generate()
{
  CM_GENERATE_FILE="$1"
  if [ -f "$1" ] && [ "$CM_FORCE_OVERWRITE" = "0" ]; then
    cm_log "+  Skipping file generation for '$(cm_relativize "$CM_PROJECT_PATH" "$1")'"
    CM_GENERATE_FILE=""
  else
    cm_log "+  Generating '$(cm_relativize "$CM_PROJECT_PATH" "$1")'"
    mkdir -p "$(dirname "$1")"
  fi
}

cm_relativize()
{
  source=$1
  target=$2

  common_part=$source # for now
  result="" # for now

  while [[ "${target#$common_part}" == "${target}" ]]; do
    # no match, means that candidate common part is not correct
    # go up one level (reduce common part)
    common_part="$(dirname "$common_part")"
    # and record that we went back, with correct / handling
    if [[ -z $result ]]; then
      result=".."
    else
      result="../$result"
    fi
  done

  if [[ $common_part == "/" ]]; then
    # special case for root (no common path)
    result="$result/"
  fi

  # since we now have identified the common part,
  # compute the non-common part
  forward_part="${target#$common_part}"

  # and now stick all parts together
  if [[ -n $result ]] && [[ -n $forward_part ]]; then
    result="$result$forward_part"
  elif [[ -n $forward_part ]]; then
    # extra slash removal
    result="${forward_part:1}"
  fi

  echo "$result"
}

cm_containers_start()
{
  cm_log "Starting Craft CMS containers"
  UP_ARGS=""
  [ "$CM_FORCE_RECREATE" = "1" ] && UP_ARGS="--force-recreate"
  cm_craft_container
  cm_docker_compose up $UP_ARGS -d
  cm_containers_refresh
}

cm_containers_stop()
{
  cm_log "Stopping Craft CMS containers"
  cm_docker_compose stop
}

cm_containers_restart()
{
  cm_log "Restarting Craft CMS containers"
  cm_containers_stop
  cm_containers_start
}

cm_containers_status()
{
  cm_log "Craft CMS containers status"
  cm_docker_compose ps | grep -v "mysql_data"
}

cm_install()
{
  mkdir -p "$CM_PROJECT_CRAFTMAN_PATH"
  touch "$CM_PROJECT_CRAFTMAN_CONFIG"
  cm_debug "Creating craftman project at $CM_PROJECT_CRAFTMAN_CONFIG"
  cm_log "Installing Craft..."
  cm_download
  _cm_extract_craft
  cm_generate
  cm_containers_start

  cm_log
  cm_log "*************************************************"
  cm_log
  cm_log "  Run 'craftman admin' to complete installation, "
  cm_log "  and 'craftman open' to access your site"
  cm_log
  cm_log "*************************************************"
  cm_log
  cm_admin
}

cm_reconfigure()
{
  CM_FORCE_RECREATE="1"
  cm_generate
  cm_containers_refresh
}

cm_regenerate()
{
  CM_FORCE_OVERWRITE="1"
  cm_generate
}

cm_start()
{
  cm_containers_start

  cm_log
  cm_log "*****************************************************"
  cm_log
  cm_log "  Run 'craftman admin' to access your control panel, "
  cm_log "   or 'craftman open' to access your site"
  cm_log
  cm_log "*****************************************************"
  cm_log
  cm_admin
}

cm_containers_remove()
{
  cm_containers_stop
  cm_docker_compose rm
}

cm_containers_refresh()
{
  cm_copy_files
  cm_configure
  cm_refresh_hook
  cm_docker_compose restart craft
}

cm_configure()
{
  cm_installer_run_all

  cm_trigger "configure"
}

cm_installer_run_all()
{
  cm_log "Prepare to run install scripts"
  find "$CM_INSTALLER_PATH" -name '*.sh' | sort |
  while read -r INSTALLER_FILE
  do
    cm_installer_run "$(basename "$INSTALLER_FILE")"
  done
}

cm_installer_run()
{
  FILE="$CM_INSTALLER_PATH/$1"
  if [ -f "$FILE.ok" ] && [ "$CM_FORCE_RECREATE" == "0" ] ; then
    cm_log "Skipping install script $1"
  else
    cm_log "Running install script $1"
    chmod +x "$FILE"
    cm_craft_exec "/scripts/$CM_INSTALLER_DIR/$1"
    touch "$CM_INSTALLER_PATH/$1.ok"
  fi
}

cm_installer_ensure_run()
{
  rm -f "$CM_INSTALLER_PATH/$1.ok"
}

cm_craft_run()
{
  CMD="${*:-bash}"
  cm_trace "cm_craft_run: [docker exec -i -t \"$(cm_craft_container)\" sh -i -c \"$CMD\"]"
  docker exec -i -t "$(cm_craft_container)" sh -i -c "$CMD"
}

cm_craft_exec()
{
  CMD="${*:-echo}"
  cm_trace "cm_craft_exec: [docker exec -t \"$(cm_craft_container)\" sh -c \"$CMD\"]"
  docker exec -t "$(cm_craft_container)" sh -c "$CMD"
}

cm_copy_files()
{
  cm_log "Copying all files and directories from '$CM_SCRIPTS_PATH/override' to craft container root '/'.'"
  if [ -d "$CM_SCRIPTS_PATH/override" ]; then
    cm_craft_exec "cd /scripts/override/ && yes | cp -rf . /"
    cm_log "All configuration files synced"
  else
    cm_log "Please, check if '$CM_SCRIPTS_PATH/override' directory exist"
  fi
}

cm_open()
{
  URL="$(cm_docker_compose port craft 80)"
  if [ "$URL" = "" ]; then
    URL=$(cm_craft_ip)
  elif [ "$DOCKER_HOST" != "" ]; then
    FORWARDED_PORT="$(echo "$URL" | cut -d':' -f2)"
    REGEX="([0-9]{1,3}\.){3}[0-9]{1,3}"
    [[ $DOCKER_HOST =~ $REGEX ]]
    URL="${BASH_REMATCH}:${FORWARDED_PORT}"
  fi

  cm_browser_open "http://${URL}$1"
}

cm_admin()
{
  cm_open "/admin"
}

cm_craft_container()
{
  if [ "$CM_CUSTOM_CONTAINER_ID" != "" ]; then
    echo "$CM_CUSTOM_CONTAINER_ID"
  else
    COLUMNS=1000 cm_docker_compose ps craft | grep craft | cut -f 1 -d ' '
  fi
}

cm_craft_ip()
{
  CONTAINER=$(cm_craft_container)
  docker inspect --format '{{ .NetworkSettings.IPAddress }}' "$CONTAINER"
}

cm_mysql_container()
{
  COLUMNS=1000 cm_docker_compose ps mysql | grep mysqld | cut -f 1 -d ' '
}

cm_craftman_upgrade()
{
  if [ -d "$CM_ROOT/.git" ]; then
    cd "$CM_ROOT"
    git pull
  else
    cm_log "Are you sure craftman was installed in $CM_ROOT? Try reinstalling running\n curl -o- https://raw.githubusercontent.com/gabrielmoreira/craftman/master/craftman_install | sh"
  fi
}

cm_docker_compose()
{
  docker-compose -f "$CM_DOCKER_COMPOSE_PATH" "$@"
}

cm_browser_open()
{
  URL="$1"
  [[ "$URL" =~ ^(.*?)://0\.0\.0\.0(.*) ]] && URL="${BASH_REMATCH[1]}://localhost${BASH_REMATCH[2]}"
  cm_log "Opening $URL in your browser"
  [ -x "$BROWSER" ] && exec "$BROWSER" "$URL" > /dev/null 2>&1
  path=$(which xdg-open || which gnome-open || which open) && exec "$path" "$URL" > /dev/null 2>&1
  cm_abort "Can't find a browser"
}

cm_find_closest()
{
  filename="$1"
  search_dir="."
  shift 1
  set +e
  while [ "$search_dir" != "/" ];
  do
      FIND=$(find "$search_dir" -maxdepth 1 -mindepth 1 -name "$filename")
      [ "$FIND" != "" ] && break
      # To ignore symlinks use "$(realsearch_dir -s $search_dir/..)"
      search_dir="$(cm_get_canonical_path "$search_dir/..")"
  done
  set -e
  echo "$search_dir" || echo ""
}

cm_load_config()
{
  if [ -f "$CM_CUSTOM_CONFIG_PATH/$1.conf" ]; then
    cm_debug "+  Loading $CM_CUSTOM_CONFIG_PATH/$1.conf"
    . "$CM_CUSTOM_CONFIG_PATH/$1.conf"
  fi
}

cm_remove_config()
{
  rm -f "$CM_CUSTOM_CONFIG_PATH/$1.conf"
}

cm_get_config_path()
{
  echo "$CM_CUSTOM_CONFIG_PATH/$1.conf"
}

cm_load_project_config()
{
  if [ -f "$CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf" ]; then
    cm_debug "+  Loading $CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf"
    . "$CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf"
  fi
}

cm_remove_project_config()
{
  cm_debug "Removing $CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf"
  rm -f "$CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf"
}

cm_get_project_config_path()
{
  mkdir -p "$CM_PROJECT_CUSTOM_CONFIG_PATH"
  echo "$CM_PROJECT_CUSTOM_CONFIG_PATH/$1.conf"
}

cm_gitignore_add()
{
  _cm_gitignore_file=".gitignore"
  if [ "$2" != "" ]; then
    mkdir -p "$2"
    _cm_gitignore_file="$2/.gitignore"
  fi
  touch "$_cm_gitignore_file"
  cm_debug "+  Adding '$1' to '$_cm_gitignore_file'"
  grep -q "$1" "$_cm_gitignore_file" || (echo "$1" >> "$_cm_gitignore_file")
}

_cm_save_custom_options() # beta
{
  _cm_save_docker_envs
  _cm_save_docker_ports
}

_cm_save_docker_ports() # beta
{
  if [ "$CM_CRAFT_HTTP_PORT" != "" ]; then
    cm_remove_project_config "docker-ports"
    echo "CM_CRAFT_HTTP_PORT=$CM_CRAFT_HTTP_PORT" >> $(cm_get_project_config_path "docker-ports")
  fi
}

_cm_save_docker_envs() # beta
{
  if [ "${#CM_DOCKER_CRAFT_ENVS[@]}" != "0" ]; then
    cm_remove_project_config "docker-envs"
    echo "CM_DOCKER_CRAFT_ENVS=\$(cat <<SETVAR"$'\n'"${CM_DOCKER_CRAFT_ENVS[*]}"$'\n'"SETVAR"$'\n'")" >> "$(cm_get_project_config_path "docker-envs")"
  fi
}

_cm_clear_docker_envs() # beta
{
  CM_DOCKER_CRAFT_ENVS=()
  cm_remove_project_config "docker-envs"
}

_cm_clear_docker_ports() # beta
{
  CM_CRAFT_HTTP_PORT=()
  cm_remove_project_config "docker-ports"
}

# *******
#  HOOKS
# *******
#  Override hooks at $CM_PROJECT_PATH/.craftman/config shellscript

# Hook for change variables/configurations
cm_config_hook()
{
  :
}

# Hook after craft refresh
cm_refresh_hook()
{
  :
}

# ******
#  MAIN
# ******

# Configure variables
_cm_initialize

# Parse arguments
while [ "$1" != "" ]; do
  PARAM="$(echo "$1" | awk -F= '{print $1}')"
  VALUE="$(echo "$1" | awk -F= '{print $2}')"
  NEXT_VALUE="$(echo "$1" | awk -F= '{print $3}')"
  PLUGIN_NAME="$(echo "$1" | awk -F: '{print $1}')"
  PLUGIN_COMMAND="$(echo "$1" | awk -F: '{print $2}')"
  case $PARAM in
    -h | --help)
      cm_usage
      exit
      ;;
    -v)
      COMMAND="cm_version"
      break
      ;;
    -F | --force-all)
      CM_FORCE_DOWNLOAD="1"
      CM_FORCE_OVERWRITE="1"
      CM_FORCE_RECREATE="1"
      ;;
    -D | --force-download)
      CM_FORCE_DOWNLOAD="1"
      ;;
    -O | --force-overwrite)
      CM_FORCE_OVERWRITE="1"
      ;;
    -R | --force-recreate)
      CM_FORCE_RECREATE="1"
      ;;
    -P | --port)
      CM_CRAFT_HTTP_PORT="$VALUE"
      ;;
    --env) # beta
      CM_DOCKER_CRAFT_ENVS=("    - $VALUE=$NEXT_VALUE")
      ;;
    --clear-envs) # beta
      _cm_clear_docker_envs
      ;;
    --clear-ports) # beta
      _cm_clear_docker_ports
      ;;
    install)
      COMMAND="cm_install"
      _cm_save_custom_options
      break
      ;;
    reconfigure)
      COMMAND="cm_reconfigure"
      _cm_save_custom_options
      break
      ;;
    regenerate)
      COMMAND="cm_regenerate"
      _cm_save_custom_options
      break
      ;;
    start)
      COMMAND="cm_start"
      break
      ;;
    status | ps)
      COMMAND="cm_containers_status"
      break
      ;;
    stop)
      COMMAND="cm_containers_stop"
      break
      ;;
    restart)
      COMMAND="cm_containers_restart"
      break
      ;;
    remove)
      COMMAND="cm_containers_remove"
      break
      ;;
    --upgrade)
      COMMAND="cm_craftman_upgrade"
      break
      ;;
    run)
      COMMAND="cm_craft_run"
      break
      ;;
    ip)
      COMMAND="cm_craft_ip"
      break
      ;;
    copy)
      COMMAND="cm_copy_files"
      break
      ;;
    open)
      COMMAND="cm_open"
      break
      ;;
    admin)
      COMMAND="cm_admin"
      break
      ;;
    *)
      if [[ " ${CM_PLUGINS[@]} " =~ " $PLUGIN_NAME " ]]; then
        COMMAND="${CM_PLUGIN_PREFIX}${PLUGIN_NAME}__${PLUGIN_COMMAND}"
        if [ "$(cm_command_exists "$COMMAND")" = "true" ]; then
          break
        fi
      fi
      echo "ERROR: unknown parameter \"$PARAM\""
      cm_usage
      exit 1
      ;;
  esac
  shift
done
shift || (echo "ERROR: command is required" && cm_usage && exit 1)

# Run initial command
$COMMAND "$@"
